# Maps FS2020 SimVars to gauges.  Metric units are auto-discovered,
# or can be overridden by specifying a `unit` for the metric.
# Raw simvar values can be transformed by specifying
# a python expression as 'fx', where the raw value is passed as a variable `x`
# See README.me for more details.
metrics:
  - metric: heading
    simvar: HEADING INDICATOR

  - metric: altitude
    simvar: INDICATED ALTITUDE

  - metric: pressureSetting
    simvar: BAROMETER PRESSURE

  - metric: pitch
    simvar: ATTITUDE INDICATOR PITCH DEGREES

  - metric: roll
    simvar: ATTITUDE INDICATOR BANK DEGREES

  - metric: turnrate
    simvar: TURN INDICATOR RATE

  - metric: slip
    simvar: TURN COORDINATOR BALL
    #TODO unit: position

  - metric: airspeed
    simvar: AIRSPEED INDICATED

  - metric: verticalSpeed
    simvar: VERTICAL SPEED

  - metric: compass
    simvar: MAGNETIC COMPASS

  - metric: fuelPressure
    simvar: "ENG FUEL PRESSURE:1"

  - metric: oilPressure
    simvar: "ENG OIL PRESSURE:1"
    #TODO unit: foot pounds => pounds per square foot?

  - metric: oilTemperature
    simvar: "ENG OIL TEMPERATURE:1"

  - metric: engineRPM
    simvar: "GENERAL ENG RPM:1"

  - metric: manifoldPressure
    simvar: "ENG MANIFOLD PRESSURE:1"

  - metric: cylinderHeadTemp
    simvar: "ENG CYLINDER HEAD TEMPERATURE:1"

  - metric: suctionPressure
    simvar: SUCTION PRESSURE

  - metric: fuelWarning  # red fuel pressure warning light
    simvar: WARNING FUEL

  - metric: oilPressureWarning  # organe
    simvar: WARNING OIL PRESSURE

todo:
  - metric: nav1obs
    dref: sim/cockpit2/radios/actuators/nav1_obs_deg_mag_pilot

  - metric: nav1course
    dref: sim/cockpit2/radios/actuators/nav1_course_deg_mag_pilot

  - metric: nav1bearing
    dref: sim/cockpit2/radios/indicators/nav1_bearing_deg_mag

  - metric: nav1rel
    dref: sim/cockpit2/radios/indicators/nav1_relative_bearing_deg
    unit: deg

    # difference between actual heading and selected radial
  - metric: nav1relvac
    dref: sim/cockpit2/radios/indicators/nav1_relative_heading_vacuum_deg_pilot

    # heading deviation in 'dots' of 2 degrees? (doesn't seem consistent with xplane display)
  - metric: nav1dots
    dref: sim/cockpit2/radios/indicators/nav1_hdef_dots_pilot

    # nav1_flag_from_to_pilot: 0 is flag, 1 is to, 2 is from.
  - metric: toFrVOR
    dref: sim/cockpit2/radios/indicators/nav1_flag_from_to_pilot
    fx: x - 1    # G3 wants 0 = to, 1 = from

  - metric: reliabilityVOR
    dref: sim/cockpit2/radios/indicators/nav1_flag_from_to_pilot
    fx: x == 0    # G3 wants 1 if unreliable

  #TODO these aren't right yet
  - metric: headingADF
    dref: sim/cockpit2/radios/actuators/adf1_card_heading_deg_mag_pilot
    unit: deg

  - metric: relativeADF
    dref: sim/cockpit2/radios/indicators/adf1_relative_bearing_deg
    unit: deg

  # 0=none,1=left,2=center,3=right,4=all
  - metric: fuelSelector
    dref: sim/cockpit2/fuel/fuel_tank_selector

  # Example of mapping from an XPlane vector to a list of G3 metrics
  - metric: [fuelFront, fuelCenter, fuelRear]
    dref: sim/cockpit2/fuel/fuel_quantity
    unit: gal

  #TODO align date / time units with G3
  - metric: midnightSecondsUTC
    dref: sim/time/zulu_time_sec
    unit: s

  - metric: midnightSecondsLocal
    dref: sim/time/local_time_sec
    unit: s


# Actions are rules which are triggered when input metrics change.
# The simplest action is copying an input metric to an output metric.
# The raw input value can be transformed by adding an `fx` key
# with a python expression where `x` is the raw input.
# FS2020 supports actions that trigger simulator events or set SimVars.
# Specify `simvar:` to set a simulator variable.
# Specify `event:` to trigger a simulator event.
# Simple events are just called with no arguments, e.g. to toggle a value.
# Add `method: set` to call the event with the input value as argument.
# Add `method: incdec` to choose one of two events based on the sign of
# the input value (the first event for positive values),
# which will be called `abs(x)` times.

actions:
  - input: SW1-1
    method: set
    event: PARKING_BRAKE_SET # set parking brake on/off
  - input: SW1-2
    method: set
    event: PITOT_HEAT_SET
  - input: ALT-ROT
    method: incdec  # choose event by sign of input and call abs(input) times
    event: [KOHLSMAN_INC, KOHLSMAN_DEC] # inc/dec altimeter setting
  - input: ATT-BTN
    event: ATTITUDE_CAGE_BUTTON # Cages attitude indicator at 0 pitch and bank
    # default method is simply call of event
  - input: some_input
    fx: x + 0         # arbitary python function of the input value
    simvar: SomeVar   # set simvar with input value
  - input: SW3-1
    output: FRONT_CABIN_LIGHTS
  - input: SW3-2
    output: REAR_CABIN_LIGHTS
  - input: fuelWarning
    output: RED_WARNING
  - input: oilPressureWarning
    output: ORANGE_WARNING




    # GYRO_DRIFT_INC, GYRO_DRIFT_DEC # inc/dec heading indicator
